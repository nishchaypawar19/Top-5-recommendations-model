# -*- coding: utf-8 -*-
"""Top 5 recommendations model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kiBQCsCdz9hHp8wAWVr9MdTwxPd8wScv
"""

import pandas as pd
import numpy as np
import ast
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from wordcloud import WordCloud

# Load datasets
movies = pd.read_csv("/content/tmdb_5000_credits.csv")
credits = pd.read_csv("/content/tmdb_5000_movies.csv")

# Merge on 'title'
movies = movies.merge(credits, left_on='title', right_on='title')


# Select useful columns
movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]


# Drop missing values
movies.dropna(inplace=True)

# Function to convert stringified JSON to list of names
def convert(obj):
    L = []
    for i in ast.literal_eval(obj):
        L.append(i['name'])
    return L


# Function to extract top 3 actors
def convert_cast(obj):
    L = []
    count = 0
    for i in ast.literal_eval(obj):
        if count < 3:
            L.append(i['name'])
            count += 1
        else:
            break
    return L

# Function to extract director
def fetch_director(obj):
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
            return [i['name']]
    return []

movies['genres'] = movies['genres'].apply(convert)
movies['keywords'] = movies['keywords'].apply(convert)
movies['cast'] = movies['cast'].apply(convert_cast)
movies['crew'] = movies['crew'].apply(fetch_director)


# Convert overview into list
movies['overview'] = movies['overview'].apply(lambda x: x.split())


# Remove spaces from multi-word names
movies['genres'] = movies['genres'].apply(lambda x: [i.replace(" ", "") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x: [i.replace(" ", "") for i in x])
movies['cast'] = movies['cast'].apply(lambda x: [i.replace(" ", "") for i in x])
movies['crew'] = movies['crew'].apply(lambda x: [i.replace(" ", "") for i in x])


# Create tags column
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']


new_df = movies[['movie_id', 'title', 'tags']]


# Join list into string
new_df['tags'] = new_df['tags'].apply(lambda x: " ".join(x))

# Text vectorization
cv = CountVectorizer(max_features=5000, stop_words='english')
vectors = cv.fit_transform(new_df['tags']).toarray()


# Cosine similarity
similarity = cosine_similarity(vectors)


# Recommendation function with visualization
def recommend(movie):
    if movie not in new_df['title'].values:
        print("Movie not found in dataset.")
        return

    movie_index = new_df[new_df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    print("Top 5 recommendations for:", movie)
    recommended_titles = []
    scores = []
    for i in movies_list:
        title = new_df.iloc[i[0]].title
        score = i[1]
        recommended_titles.append(title)
        scores.append(score)
        print(title, " (Similarity:", round(score, 3), ")")

    # Visualization: Bar chart of similarity scores
    plt.figure(figsize=(8,5))
    plt.barh(recommended_titles[::-1], scores[::-1], color='skyblue')
    plt.xlabel("Cosine Similarity Score")
    plt.title(f"Top 5 Recommendations for '{movie}'")
    plt.show()

recommend('Avatar')